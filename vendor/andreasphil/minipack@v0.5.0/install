#!/bin/bash

# TODO: Link to tag
# TODO: Self-update

# Strict mode ---------------------------------------------

set -u            # no unset variables
set -e            # exit immediately on error
set -E            # inherit -e in functions
set -o pipefail   # return value of pipeline is rightmost return
IFS=$'\n\t'       # only allow tab and newline as separators

# Utilities -----------------------------------------------

# Log an error message and exit the script.
#
# Usage:
#   _fatal <message>
_fatal() {
  _log error "$@"
  exit 1
}

# Log a message with the specified level. Allowed levels are "none", "debug",
# "info", "warn", and "error".
#
# Usage:
#   _log <level> <message>
_log() {
  level="$1"
  shift

  gum log --level="$level" "$@"
}

# Exit if the specified command does not exist.
#
# Usage:
#   _require <command>
_require() {
  if ! type "$1" &>/dev/null; then
    printf "\033[0;31m\033[1mERROR\033[0m required dependency %s is missing\n" $1
    exit 1
  fi
}

# Global configuration ------------------------------------

version="v0.4.0"
download_url="https://github.com/andreasphil/minipack/archive/refs/tags/${version}.tar.gz"

# Init ----------------------------------------------------

_require "gum"
_require "http"

# Query location of Minipack
vendor_dir=$(gum input --prompt="where should the files be stored? " --value="vendor")
if [[ -z "$vendor_dir" ]]; then
  _fatal "output directory can't be empty"
fi

# Query location of dependencies file
deps_file=$(gum input --prompt="what should the dependencies file be called? " --value="dependencies")
if [[ -z "$deps_file" ]]; then
  _fatal "dependencies file can't be empty"
fi
if [[ -e "$deps_file" ]]; then
  if ! gum confirm "file already exists, replace it?"; then
    _fatal "ok, won't replace existing dependencies file"
  fi
fi

# Minipack
pack_dir="$vendor_dir/andreasphil/minipack@${version}"
mkdir -p "$pack_dir"
gum spin --title "downloading Minipack..." --show-error -- http -d "$download_url" --print "" --output "$pack_dir/temp.tar.gz"
tar -xf "$pack_dir/temp.tar.gz" -C "$pack_dir" --strip-components=1
rm "$pack_dir/temp.tar.gz" "$pack_dir/.gitignore"
_log info "successfully downloaded Minipack!"

# Dependencies file template
cat << EOF > "${deps_file}"
#!/bin/bash

source ${pack_dir}/pack

# Add your dependencies here
get_from_github andreasphil/minipack v0.4.0
EOF

chmod +x "${deps_file}"

_log info "view and edit "${deps_file}" to get started, then run "./${deps_file}" to install."
